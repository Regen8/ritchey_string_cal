/*
@number: 02
@name: Compiles: -Wall -Wextra -pedantic -Weffc++ -Wno-unused-parameter
@points: 4
@show_output: True
@type: script
@target: main.cpp
*/
{
    script
    script_tests/compiles.sh
}

/*
@number: 03
@name: digit_to_decimal (happy paths)
@points: 7
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(digit_to_decimal('0'), 0);
EXPECT_EQ(digit_to_decimal('1'), 1);
EXPECT_EQ(digit_to_decimal('2'), 2);
EXPECT_EQ(digit_to_decimal('3'), 3);
EXPECT_EQ(digit_to_decimal('4'), 4);
EXPECT_EQ(digit_to_decimal('5'), 5);
EXPECT_EQ(digit_to_decimal('6'), 6);
EXPECT_EQ(digit_to_decimal('7'), 7);
EXPECT_EQ(digit_to_decimal('8'), 8);
EXPECT_EQ(digit_to_decimal('9'), 9);
}

/*
@number: 04
@name: digit_to_decimal (unhappy paths)
@points: 3
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_THROW(digit_to_decimal('+'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('-'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('*'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('/'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('^'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('('), std::invalid_argument);
EXPECT_THROW(digit_to_decimal(')'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('['), std::invalid_argument);
EXPECT_THROW(digit_to_decimal(']'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('`'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('{'), std::invalid_argument);
EXPECT_THROW(digit_to_decimal('}'), std::invalid_argument);
}


/*
@number: 05
@name: decimal_to_digit (happy paths)
@points: 7
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(decimal_to_digit(0), '0');
EXPECT_EQ(decimal_to_digit(1), '1');
EXPECT_EQ(decimal_to_digit(2), '2');
EXPECT_EQ(decimal_to_digit(3), '3');
EXPECT_EQ(decimal_to_digit(4), '4');
EXPECT_EQ(decimal_to_digit(5), '5');
EXPECT_EQ(decimal_to_digit(6), '6');
EXPECT_EQ(decimal_to_digit(7), '7');
EXPECT_EQ(decimal_to_digit(8), '8');
EXPECT_EQ(decimal_to_digit(9), '9');
}

/*
@number: 06
@name: decimal_to_digit (unhappy paths)
@points: 3
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_THROW(decimal_to_digit(36), std::invalid_argument);
EXPECT_THROW(decimal_to_digit(-1), std::invalid_argument);
EXPECT_THROW(decimal_to_digit(121), std::invalid_argument);
}

/*
@number: 07
@name: trim_leading_zeros (small, positive)
@points: 3
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(trim_leading_zeros("123"), "123");
EXPECT_EQ(trim_leading_zeros("0123"), "123");
EXPECT_EQ(trim_leading_zeros("00123"), "123");
EXPECT_EQ(trim_leading_zeros("890"), "890");
EXPECT_EQ(trim_leading_zeros("0001000"), "1000");
EXPECT_EQ(trim_leading_zeros("00000"), "0");
EXPECT_EQ(trim_leading_zeros("500"), "500");

}

/*
@number: 08
@name: trim_leading_zeros (big, positive)
@points: 3
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(trim_leading_zeros("0000000000000000000326031034539696741651963735362758771645"), "326031034539696741651963735362758771645");
EXPECT_EQ(trim_leading_zeros("0000000000000000000038304178060189533755296230734055537075"), "38304178060189533755296230734055537075");
EXPECT_EQ(trim_leading_zeros("00000000000000000134263856166574744696825070000169750383"), "134263856166574744696825070000169750383");
EXPECT_EQ(trim_leading_zeros("000000000089611976733556581362551242339637683305"), "89611976733556581362551242339637683305");
EXPECT_EQ(trim_leading_zeros("87059372967692572152857503696274086756"), "87059372967692572152857503696274086756");
}

/*
@number: 09
@name: trim_leading_zeros (small, negative)
@points: 2
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(trim_leading_zeros("-00123"), "-123");
EXPECT_EQ(trim_leading_zeros("-00000"), "0");
EXPECT_EQ(trim_leading_zeros("-500"), "-500");
}

/*
@number: 10
@name: trim_leading_zeros (big, negative)
@points: 2
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(trim_leading_zeros("-0000000000000000000326031034539696741651963735362758771645"), "-326031034539696741651963735362758771645");
EXPECT_EQ(trim_leading_zeros("-87059372967692572152857503696274086756"), "-87059372967692572152857503696274086756");
}

/*
@number: 11
@name: add (small, positives)
@points: 4
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("0", "0"), "0");
EXPECT_EQ(add("0", "1"), "1");
EXPECT_EQ(add("0", "2"), "2");
EXPECT_EQ(add("0", "3"), "3");
EXPECT_EQ(add("0", "4"), "4");
EXPECT_EQ(add("0", "5"), "5");
EXPECT_EQ(add("0", "6"), "6");
EXPECT_EQ(add("0", "7"), "7");
EXPECT_EQ(add("0", "8"), "8");
EXPECT_EQ(add("0", "9"), "9");
EXPECT_EQ(add("1", "1"), "2");
EXPECT_EQ(add("1", "2"), "3");
EXPECT_EQ(add("1", "3"), "4");
EXPECT_EQ(add("1", "4"), "5");
EXPECT_EQ(add("1", "5"), "6");
EXPECT_EQ(add("1", "6"), "7");
EXPECT_EQ(add("1", "7"), "8");
EXPECT_EQ(add("1", "8"), "9");
EXPECT_EQ(add("1", "9"), "10");
EXPECT_EQ(add("2", "2"), "4");
EXPECT_EQ(add("2", "3"), "5");
EXPECT_EQ(add("2", "4"), "6");
EXPECT_EQ(add("2", "5"), "7");
EXPECT_EQ(add("2", "6"), "8");
EXPECT_EQ(add("2", "7"), "9");
EXPECT_EQ(add("2", "8"), "10");
EXPECT_EQ(add("2", "9"), "11");
EXPECT_EQ(add("3", "3"), "6");
EXPECT_EQ(add("3", "4"), "7");
EXPECT_EQ(add("3", "5"), "8");
EXPECT_EQ(add("3", "6"), "9");
EXPECT_EQ(add("3", "7"), "10");
EXPECT_EQ(add("3", "8"), "11");
EXPECT_EQ(add("3", "9"), "12");
EXPECT_EQ(add("4", "4"), "8");
EXPECT_EQ(add("4", "5"), "9");
EXPECT_EQ(add("4", "6"), "10");
EXPECT_EQ(add("4", "7"), "11");
EXPECT_EQ(add("4", "8"), "12");
EXPECT_EQ(add("4", "9"), "13");
EXPECT_EQ(add("5", "5"), "10");
EXPECT_EQ(add("5", "6"), "11");
EXPECT_EQ(add("5", "7"), "12");
EXPECT_EQ(add("5", "8"), "13");
EXPECT_EQ(add("5", "9"), "14");
EXPECT_EQ(add("6", "6"), "12");
EXPECT_EQ(add("6", "7"), "13");
EXPECT_EQ(add("6", "8"), "14");
EXPECT_EQ(add("6", "9"), "15");
EXPECT_EQ(add("7", "7"), "14");
EXPECT_EQ(add("7", "8"), "15");
EXPECT_EQ(add("7", "9"), "16");
EXPECT_EQ(add("8", "8"), "16");
EXPECT_EQ(add("8", "9"), "17");
EXPECT_EQ(add("9", "9"), "18");
EXPECT_EQ(add("99", "1"), "100");
EXPECT_EQ(add("1", "999"), "1000");
EXPECT_EQ(add("867", "5309"), "6176");
EXPECT_EQ(add("123", "456"), "579");
EXPECT_EQ(add("7654", "2346"), "10000");
EXPECT_EQ(add("56678", "66778"), "123456");
EXPECT_EQ(add("1234567890", "9876543210"), "11111111100");
EXPECT_EQ(add("0", "125416"), "125416");
}

/*
@number: 12
@name: add (big, positives)
@points: 6
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("191199470105049954009492586269278868364","263770308020367589890320354426985183767"), "454969778125417543899812940696264052131");
EXPECT_EQ(add("73800861935149024999324449299898394796","218790592842064484301508128465285689950"), "292591454777213509300832577765184084746");
EXPECT_EQ(add("281072723111464019363367426831710645457","148594231439505992577197824896668111401"), "429666954550970011940565251728378756858");
EXPECT_EQ(add("91587651391771357992774364510664081739","149406582348822666650515344066288025085"), "240994233740594024643289708576952106824");
EXPECT_EQ(add("329472901776331260277732033744962166320","60560256770384487373188811314260026051"), "390033158546715747650920845059222192371");
EXPECT_EQ(add("111863789518470854654855725218393231611","331245335873022836532413791763430244451"), "443109125391493691187269516981823476062");
EXPECT_EQ(add("104194807769826748506736149719749412214","153592229359380118190495405466798628336"), "257787037129206866697231555186548040550");
EXPECT_EQ(add("133853916094204616263498110233047810068","279749921392621201516784516119321087074"), "413603837486825817780282626352368897142");
EXPECT_EQ(add("162032031926335945250388319961188514712","172908175710588554381452705881393164680"), "334940207636924499631841025842581679392");
EXPECT_EQ(add("41140447355868201378847053439002701765","156143392510979985807455553729425817452"), "197283839866848187186302607168428519217");
EXPECT_EQ(add("165867865642544209829111630870318500153","111830647366729556103332387493471164094"), "277698513009273765932444018363789664247");
EXPECT_EQ(add("229987330163012696454742827931525836498","160126082515392930672158868971744920596"), "390113412678405627126901696903270757094");
EXPECT_EQ(add("56410873041568339497653202909610545440","29418508028309407754454889408369097981"), "85829381069877747252108092317979643421");
EXPECT_EQ(add("225303941101675324478430319674208055018","303882299402980354437781348444786446052"), "529186240504655678916211668118994501070");
EXPECT_EQ(add("224394354632887172909857576712866343177","268634619364790806452011087656103057410"), "493028973997677979361868664368969400587");
EXPECT_EQ(add("269399543735781151407552569173853310705","68794030406346713377494022453323368911"), "338193574142127864785046591627176679616");
EXPECT_EQ(add("67307068874793105878925818768383545466","295184287370779651533811935797829179347"), "362491356245572757412737754566212724813");
EXPECT_EQ(add("63189762247395230376236159191975566013","70107546393984562381126647999359202676"), "133297308641379792757362807191334768689");
EXPECT_EQ(add("91195940377080684957928363456562759347","112611680044663914623052711204850924621"), "203807620421744599580981074661413683968");
EXPECT_EQ(add("78265616672123476780099152293612406308","25012031880538305104026878851169335106"), "103277648552661781884126031144781741414");

// really big positives
EXPECT_EQ(add("63594364424706262655368908175115414835083881939751681213150686088304043297181096220944661562933522367222397236481960398548023705850308812279366801547870060909894054109590024095574203497613921030877739","65055273652029391891825121490479839693473801827713233441362915107432556780547238546186999448690600666708198763483062916548997310866906055076118191666066678364492384118122385908779615747775693362034454"),"128649638076735654547194029665595254528557683767464914654513601195736600077728334767131661011624123033930595999965023315097021016717214867355484993213936739274386438227712410004353819245389614392912193");

}

/*
@number: 13
@name: add (small, negatives)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("-1", "-1"), "-2");
EXPECT_EQ(add("-1", "-2"), "-3");
EXPECT_EQ(add("-1", "-3"), "-4");
EXPECT_EQ(add("-1", "-4"), "-5");
EXPECT_EQ(add("-1", "-5"), "-6");
EXPECT_EQ(add("-1", "-6"), "-7");
EXPECT_EQ(add("-1", "-7"), "-8");
EXPECT_EQ(add("-1", "-8"), "-9");
EXPECT_EQ(add("-1", "-9"), "-10");
EXPECT_EQ(add("-2", "-2"), "-4");
EXPECT_EQ(add("-2", "-3"), "-5");
EXPECT_EQ(add("-2", "-4"), "-6");
EXPECT_EQ(add("-2", "-5"), "-7");
EXPECT_EQ(add("-2", "-6"), "-8");
EXPECT_EQ(add("-2", "-7"), "-9");
EXPECT_EQ(add("-2", "-8"), "-10");
EXPECT_EQ(add("-2", "-9"), "-11");
EXPECT_EQ(add("-3", "-3"), "-6");
EXPECT_EQ(add("-3", "-4"), "-7");
EXPECT_EQ(add("-3", "-5"), "-8");
EXPECT_EQ(add("-3", "-6"), "-9");
EXPECT_EQ(add("-3", "-7"), "-10");
EXPECT_EQ(add("-3", "-8"), "-11");
EXPECT_EQ(add("-3", "-9"), "-12");
EXPECT_EQ(add("-4", "-4"), "-8");
EXPECT_EQ(add("-4", "-5"), "-9");
EXPECT_EQ(add("-4", "-6"), "-10");
EXPECT_EQ(add("-4", "-7"), "-11");
EXPECT_EQ(add("-4", "-8"), "-12");
EXPECT_EQ(add("-4", "-9"), "-13");
EXPECT_EQ(add("-5", "-5"), "-10");
EXPECT_EQ(add("-5", "-6"), "-11");
EXPECT_EQ(add("-5", "-7"), "-12");
EXPECT_EQ(add("-5", "-8"), "-13");
EXPECT_EQ(add("-5", "-9"), "-14");
EXPECT_EQ(add("-6", "-6"), "-12");
EXPECT_EQ(add("-6", "-7"), "-13");
EXPECT_EQ(add("-6", "-8"), "-14");
EXPECT_EQ(add("-6", "-9"), "-15");
EXPECT_EQ(add("-7", "-7"), "-14");
EXPECT_EQ(add("-7", "-8"), "-15");
EXPECT_EQ(add("-7", "-9"), "-16");
EXPECT_EQ(add("-8", "-8"), "-16");
EXPECT_EQ(add("-8", "-9"), "-17");
EXPECT_EQ(add("-9", "-9"), "-18");
EXPECT_EQ(add("-99", "-1"), "-100");
EXPECT_EQ(add("-1", "-999"), "-1000");
EXPECT_EQ(add("-867", "-5309"), "-6176");
EXPECT_EQ(add("-123", "-456"), "-579");
EXPECT_EQ(add("-7654", "-2346"), "-10000");
EXPECT_EQ(add("-56678", "-66778"), "-123456");
EXPECT_EQ(add("-1234567890", "-9876543210"), "-11111111100");
EXPECT_EQ(add("-426451", "-1"), "-426452");
}

/*
@number: 14
@name: add (big, negatives)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("-135758479798452437103802846884503191020","-153914497300238348517027853426798819507"), "-289672977098690785620830700311302010527");
EXPECT_EQ(add("-140286516666368024455980788309428944120","-241986817842663793189492165466471818835"), "-382273334509031817645472953775900762955");
EXPECT_EQ(add("-275876084854980253382895704161330209499","-81039349666608443164408098716203097810"), "-356915434521588696547303802877533307309");
EXPECT_EQ(add("-95262219203588360514916949122817183814","-62169921093576759534540851200274317564"), "-157432140297165120049457800323091501378");
EXPECT_EQ(add("-240255624750756624225312444462056114955","-45912545549053347839446504920506660714"), "-286168170299809972064758949382562775669");
EXPECT_EQ(add("-203477552308481614988765226292961869013","-290071027724321419462698492003894843253"), "-493548580032803034451463718296856712266");
EXPECT_EQ(add("-242632864269031045383548053928352623460","-255741874636009666517577322671671467126"), "-498374738905040711901125376600024090586");
EXPECT_EQ(add("-332606227998943515002640339304971567355","-180995087495094988744585366366235859929"), "-513601315494038503747225705671207427284");
EXPECT_EQ(add("-289138382417950127975827912956948285114","-200469127897182582990221337756727548002"), "-489607510315132710966049250713675833116");
EXPECT_EQ(add("-105549067011618932826977936723249739016","-27638216579519220727584059248920055411"), "-133187283591138153554561995972169794427");
EXPECT_EQ(add("-124987029281146046302039449542557660724","-92933378974494226963356042591081737737"), "-217920408255640273265395492133639398461");
EXPECT_EQ(add("-46707744447573425274983070233278201990","-73540826154060049484149621471693426457"), "-120248570601633474759132691704971628447");
EXPECT_EQ(add("-34108311833365734020762032343318949010","-16324779688768832438580208379538251107"), "-50433091522134566459342240722857200117");
EXPECT_EQ(add("-226127318087758754544575094997828936121","-19903742852527594132452919665059614773"), "-246031060940286348677028014662888550894");
EXPECT_EQ(add("-95335264869456831260309936614712446","-150016454284916180771350907577085382821"), "-150111789549785637602611217513700095267");
EXPECT_EQ(add("-94216342634604388813227286074516549987","-137767432241427106418495698475757016390"), "-231983774876031495231722984550273566377");
EXPECT_EQ(add("-249308711635352390696322700979441455425","-176057266526089313114893111589457060902"), "-425365978161441703811215812568898516327");
EXPECT_EQ(add("-253339359175744383010613083786479711251","-321984152767314363105543039803978075139"), "-575323511943058746116156123590457786390");
EXPECT_EQ(add("-175028570241477012387243448611066338377","-88670582628380254295844782422688384568"), "-263699152869857266683088231033754722945");
EXPECT_EQ(add("-296595319862729845263698024095890291882","-205114137469144228345125565701887752204"), "-501709457331874073608823589797778044086");

// really big negatives
EXPECT_EQ(add("-64253734565202848031466287939402227670705525318025885462939411236815860534673559117135124101317870764953872637280789637455489575135458036155505824738669373241004030889051965215131359865540982539234971","-99699175999811726039773482628506946246080413192903619277099025023091825702752599277277345025079667580843162249373992557936842515582655976446443331765618410677134875664715028910846465300037041125276959"),"-163952910565014574071239770567909173916785938510929504740038436259907686237426158394412469126397538345797034886654782195392332090718114012601949156504287783918138906553766994125977825165578023664511930");

}

/*
@number: 15
@name: add (trim_leading)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("023482358374943","23423434"), "23482381798377");
EXPECT_EQ(add("3243243","0000324354254556"), "324357497799");
EXPECT_EQ(add("-03413242343","-343243"), "-3413585586");
EXPECT_EQ(add("-00000954354352","-003545"), "-954357897");
EXPECT_EQ(add("00023432454356434467897654","00000000044343273454"), "23432454356478811171108");

}

/*
@number: 16
@name: add (hidden tests)
@points: 5
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("191199470112449954009492586269278868364","2637703123020367589890320354426985183767"), "2828902593132817543899812940696264052131");
EXPECT_EQ(add("7380086193556645999324449299898394796","21879045645064484301508128465285689950"), "29259131838621130300832577765184084746");
EXPECT_EQ(add("2241411464019363367426831710645457","648591241439505992577197824896668111401"), "648593482850970011940565251728378756858");
EXPECT_EQ(add("91456571391771357992774364510664081739","123432482348822666650515344066288025085"), "214889053740594024643289708576952106824");
EXPECT_EQ(add("32947123213331260277732033744962166320","60560256787675487373188811314260026051"), "93507380001006747650920845059222192371");
EXPECT_EQ(add("111863789518470812341354855725218393231611","33686578335873022836532413791763430244451"), "145550367854343835177887269516981823476062");
EXPECT_EQ(add("1041948077609909806736149719749412214","12314229359380118190495405466798628336"), "13356177436990027997231555186548040550");
EXPECT_EQ(add("13385391609","2797499213"), "16182890822");
EXPECT_EQ(add("16203","1729081"), "1745284");
EXPECT_EQ(add("4114044735","1561433925102"), "1565547969837");
EXPECT_EQ(add("829111630870318500153","11332387493471164094"), "840444018363789664247");
EXPECT_EQ(add("22","160"), "182");
EXPECT_EQ(add("56","29481"), "29537");
EXPECT_EQ(add("74208055018","6052"), "74208061070");
EXPECT_EQ(add("22439433177","26863467410"), "49302900587");

// really big positives
EXPECT_EQ(add("238948732497374793287409237589437589437689547694837549375938743897594872894753984728957432895732089572834957248937539275","935934597439587432985734839693473801827713233441362915107432556780547238546186999448690600666708198763483062916548997310866906055076118191666066678364492384118122385908779615747775693362034454"),"935934597439587432985734839693473801827713233441362915107432556780547238785135731946065393954117436352920652354238545005704455431014862089260939573118477113075555281640869188582732942299573729");
}

/*
@number: 17
@name: multiply (small, positives)
@points: 4
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("4","2"), "8");
EXPECT_EQ(multiply("6","7"), "42");
EXPECT_EQ(multiply("18","51"), "918");
EXPECT_EQ(multiply("2","73"), "146");
EXPECT_EQ(multiply("15","29"), "435");
EXPECT_EQ(multiply("138","3"), "414");
EXPECT_EQ(multiply("133","193"), "25669");
EXPECT_EQ(multiply("175","170"), "29750");
EXPECT_EQ(multiply("77","185"), "14245");
EXPECT_EQ(multiply("267","310"), "82770");
EXPECT_EQ(multiply("97","296"), "28712");
EXPECT_EQ(multiply("426","135"), "57510");
EXPECT_EQ(multiply("462","458"), "211596");
EXPECT_EQ(multiply("340","473"), "160820");
EXPECT_EQ(multiply("650","449"), "291850");
EXPECT_EQ(multiply("201","701"), "140901");
EXPECT_EQ(multiply("409","681"), "278529");
EXPECT_EQ(multiply("436","10"), "4360");
EXPECT_EQ(multiply("65","312"), "20280");
EXPECT_EQ(multiply("826","148"), "122248");
EXPECT_EQ(multiply("835","798"), "666330");
}

/*
@number: 18
@name: multiply (big, positives)
@points: 6
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("92560376602614728379904026966926278813","293714237838669943810821527929717135881"), "27186300467897242995489131297834883347365795642144300771933294903095612389253");
EXPECT_EQ(multiply("253967950181733959464222754977307541031","180316957149263908158896046324419378557"), "45794727990206113345379421730602806596444478130364571988565254524346799072267");
EXPECT_EQ(multiply("21908053698591430889884716219790042707","247522227375530822504869309591812499731"), "5422730248938087161893740961528261820817962410320109849009085449412916011817");
EXPECT_EQ(multiply("312593134826879571846277171194994747988","127933071689708753625542069154374107141"), "39990999927517978386807515170496643650103395752038355272585625400831806182308");
EXPECT_EQ(multiply("277107227223263068869006447385503119506","36994405250675160944990517366391207319"), "10251417061788318174494443992697197187841767849485878284657263576044078864414");

// really big positives
EXPECT_EQ(multiply("31926448616030161062313090653529999756529928201134270818566753718106279339392581873635568041867280228064800478352626620714720565997807309170412069757651406512292671358960177620284797469567026042358307","8713049086867935522824087359365318045735905526209594470817878433989850902246657040045222285698036797655702604715802685260560051506791018358526183993460162719227906293532683974393287134969979655939688"),"278176713960837658663890361707834302225900368302779976454145525707051491142506255050156864600090842289913664391813773982051355900704279125698119109099741333434911416154392632385818969364477731069091485254307359453846509441412604786448355696920337561777234363813013089625094690648072718812358384314679026194446472804240640443218537208868169681894895852507781489128474436700156845647363577935677788216");
}

/*
@number: 19
@name: multiply (small, negatives)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("-3","-3"), "9");
EXPECT_EQ(multiply("-6","-8"), "48");
EXPECT_EQ(multiply("-40","-88"), "3520");
EXPECT_EQ(multiply("-41","-59"), "2419");
EXPECT_EQ(multiply("-69","-34"), "2346");
EXPECT_EQ(multiply("-179","-228"), "40812");
EXPECT_EQ(multiply("-160","-148"), "23680");
EXPECT_EQ(multiply("-62","-26"), "1612");
EXPECT_EQ(multiply("-65","-203"), "13195");
EXPECT_EQ(multiply("-323","-44"), "14212");
EXPECT_EQ(multiply("-171","-18"), "3078");
EXPECT_EQ(multiply("-256","-120"), "30720");
EXPECT_EQ(multiply("-286","-289"), "82654");
EXPECT_EQ(multiply("-278","-480"), "133440");
EXPECT_EQ(multiply("-499","-241"), "120259");
EXPECT_EQ(multiply("-220","-544"), "119680");
EXPECT_EQ(multiply("-198","-419"), "82962");
EXPECT_EQ(multiply("-467","-339"), "158313");
EXPECT_EQ(multiply("-651","-897"), "583947");
EXPECT_EQ(multiply("-138","-69"), "9522");
}

/*
@number: 20
@name: multiply (big, negatives)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("-254470418728294241703746244978016267196","-180786457686461184198228194500448198752"), "46004805587878826594765778375248235319668426256993782322616490780392945739392");
EXPECT_EQ(multiply("-101784595276658183060104029627568134882","-236162127682816188333180314951877707277"), "24037666585869919341272705925750294455588843854047907663377549372581248936314");
EXPECT_EQ(multiply("-63589347387558212808791947319871346443","-70191029160981190747652233233094563270"), "4463401736807861615765316905671077478329558336783663587643815710717952948610");
EXPECT_EQ(multiply("-132764415542937216382613096532086113364","-197886527574705826490577445445109716423"), "26272289177277148292145008087827815481197125396794329943214249620066270576972");
EXPECT_EQ(multiply("-162777721279186538150690044674343188632","-59246012502574926699882701884458336857"), "9643930910047342329775351321808260740660575292444114852293261828304949009624");

// really big negatives
EXPECT_EQ(multiply("-23558109955557500098583567875904181628020640324212040124668723443352268674481881521687469737177418220192918801423363363603659906139099297242322137582339095268206164909255971954565032126767248241744089","-54525400214201329761023979065409084204969855749839901604126444633687894555138879759195855873070550455622343503687579254121737890659324390806938118906419259074033299147573275899896995465384625947645378"),"1284515373616933395012142506533853407630817682358123457424092767838252216772782408750957517440507272815932088953742663027877964293982620196037319639763701438684689739358567316476259927034935883852126690270723281691683623380071065772588713112722490695020540728394576671069925576279820320131511315331439619136957445460140110636278339582419448595145989242414415596059438855721230731030083299037599670642");
}

/*
@number: 21
@name: multiply (small, opposite signs)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("-2","3"), "-6");
EXPECT_EQ(multiply("-83","39"), "-3237");
EXPECT_EQ(multiply("-54","200"), "-10800");
EXPECT_EQ(multiply("-233","32"), "-7456");
EXPECT_EQ(multiply("-7","76"), "-532");
EXPECT_EQ(multiply("-301","409"), "-123109");
EXPECT_EQ(multiply("-242","313"), "-75746");
EXPECT_EQ(multiply("-468","617"), "-288756");
EXPECT_EQ(multiply("-722","622"), "-449084");
EXPECT_EQ(multiply("-6","606"), "-3636");

EXPECT_EQ(multiply("4","-5"), "-20");
EXPECT_EQ(multiply("78","-93"), "-7254");
EXPECT_EQ(multiply("97","-90"), "-8730");
EXPECT_EQ(multiply("225","-298"), "-67050");
EXPECT_EQ(multiply("216","-17"), "-3672");
EXPECT_EQ(multiply("483","-479"), "-231357");
EXPECT_EQ(multiply("386","-344"), "-132784");
EXPECT_EQ(multiply("234","-537"), "-125658");
EXPECT_EQ(multiply("711","-664"), "-472104");
EXPECT_EQ(multiply("476","-825"), "-392700");
}

/*
@number: 22
@name: multiply (big, opposite signs)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("-88703126913134399458001867211450517415","210406435259803899150676145989300791987"), "-18663708730190581904713701693987981283119714085582535684160369248720435953605");
EXPECT_EQ(multiply("-14946889256406374291868504829811464002","188945898973870268729368357121292825446"), "-2824153427414585700305793252535374627045509555091593068410714554284298594892");
EXPECT_EQ(multiply("-7919573697120908230076796408688297714","8843865620611019980285492969152141576"), "-70039645549862911043435555732071516255379269520842539636574750572965157264");
EXPECT_EQ(multiply("192460398344585928044548787167930448736","-113467891951611786267889797019028921580"), "-21838075684327639978013740390226063914031181014790736935508605391891554122880");
EXPECT_EQ(multiply("52244037504756799976474609916746292187","-291027947372682030789765219745393261216"), "-15204474997470788225372476653563845372197240652479608390969016937943950919392");
EXPECT_EQ(multiply("46881225395613153424248983206665003037","-291927967212943605271488677634604895897"), "-13685940830193175752887232133461399876906195591686842704989857537848573839189");

// really big opposite signs
EXPECT_EQ(multiply("90087324994407076286007611051410953275094083599968635634337186872554407846296076621776294971051740931436415016425306689845962000199795202261150955774737455282080361343766395683580529258722822722796962","-48234741764825242232192510114396471423138479144283114730060708736806257366461488449670614891877463450694374556320740849598976388058279015304790274790098189820936094924565048268068601608378614658415589"),"-4345338857389111934120461929994564455943784695139439090309227646069418358122340024624820777221592898441040249003136956137741918494528609916215525525809520216978441382399066462680137351685826481926175491043867975623973843891299636816168698300362060775548265429647844477251767136432719088824779771363625449646932206443420103859380242586588988416451024127422503211173840075338509466804655743613462640618");
EXPECT_EQ(multiply("-44496481906735555787604204897186540869944177252787597962901316870202658918476069578097559573574149622896364173687962914814278021608800280812565212156676481235056979286872606365493578595354169892450474","34057784161118377378207732566729369799259933897038338221043674340941504559839139814175215560263965473985714212220977530684587011414967082671915099204680440689005069886222812046132722960227166220679545"),"-1515451576708708667986185533714820855543551828772393949164020862463440915557197437718062746892097909601532395910139486070596074743090202250297894737766436211083115796586789494781156806851532231345279728811107695713583409648363065905545905132500695553413409074136704112840217754238552025893412835566026658179017663072227101552866997360386414230013452614445701063457461718497562764968770095353537354330");

}

/*
@number: 23
@name: multiply (trim_leading)
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("068742343","996854"), "68526079588922");
EXPECT_EQ(multiply("12344","000000057683583"), "712046148552");
EXPECT_EQ(multiply("-0024443","-8988"), "219693684");
EXPECT_EQ(multiply("-000003434","-0765865"), "2629980410");
EXPECT_EQ(multiply("386894","-00034343"), "-13287100642");
EXPECT_EQ(multiply("-000068745345","00000001"), "-68745345");
}

/*
@number: 24
@name: multiply (hidden tests)
@points: 5
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(multiply("9256037660261472837990407897278813","879878687687617135881"), "8144190269698026902932830301681753861436312048763389253");
EXPECT_EQ(multiply("25395802399464222754977307541031","180316957123987403958896046324419378557"), "4579293812393446688510336784737450399213269269238365254524346799072267");
EXPECT_EQ(multiply("219080536985914302342707","234309591812499731"), "51332671195232830311360940445339107311817");
EXPECT_EQ(multiply("31259313482234988","24107141"), "753572677679439850849308");
EXPECT_EQ(multiply("223406","3692349"), "824892920694");

// really big positives
EXPECT_EQ(multiply("3234230653529999756529928201134270818566753718106279339392581873635568041867280228064800478352626620714720565997807309170412069757651406512292671358960177620284797469567026042358307","23948902382824087359365318045735905526209594470817878433989850902246657040045222285698036797655702604715802685260560051506791018358526183993460162719227906293532683974393287134969979655939688"),"77456274204927316476464921898869645115213964433193622812772437812702396058444572455103113988126306866817669165962588134857548882842072085422938859344791918646037786083245394525711860340675533645732604786448355696920337561777234363813013089625094690648072718812358384314679026194446472804240640443218537208868169681894895852507781489128474436700156845647363577935677788216");
}

/*
@number: 25
@name: user interface (add, positives)
@points: 4
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/27_input.txt
output
io_tests/27_output.txt
}

/*
@number: 26
@name: user interface (add, negatives)
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/28_input.txt
output
io_tests/28_output.txt
}

/*
@number: 27
@name: user interface (mult, positives)
@points: 4
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/29_input.txt
output
io_tests/29_output.txt
}

/*
@number: 28
@name: user interface (mult, negatives)
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/30_input.txt
output
io_tests/30_output.txt
}

/*
@number: 29
@name: user interface (mult, opposite signs)
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/31_input.txt
output
io_tests/31_output.txt
}

/*
@number: 30
@name: user interface (add, mult, positives)
@points: 4
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/32_input.txt
output
io_tests/32_output.txt
}

/*
@number: 31
@name: user interface (add, mult, both signs)
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/33_input.txt
output
io_tests/33_output.txt
}

/*
@number: 32
@name: user interface (add, mult, trim_leading)
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/34_input.txt
output
io_tests/34_output.txt
}

/*
@number: 33
@name: user interface (hidden tests)
@points: 3
@show_output: False
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/35_input.txt
output
io_tests/35_output.txt
}

/*
@number: 34
@name: Compiles: -std=c++17 -Wall -Wextra -pedantic -Weffc++
@points: 4
@show_output: True
@type: script
@target: main.cpp
*/
{
    script
    script_tests/final_submission.sh
}

/*
@number: 35
@name: bonus_01
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
// trim leading too
EXPECT_EQ(subtract("0037","039"), "-2");

// positive inputs, negative results
EXPECT_EQ(subtract("37","39"), "-2");
EXPECT_EQ(subtract("146","149"), "-3");
EXPECT_EQ(subtract("388","575"), "-187");
EXPECT_EQ(subtract("172","563"), "-391");
EXPECT_EQ(subtract("338","429"), "-91");
EXPECT_EQ(subtract("494","584"), "-90");
EXPECT_EQ(subtract("800","1015"), "-215");
EXPECT_EQ(subtract("186","350"), "-164");
EXPECT_EQ(subtract("21","708"), "-687");
EXPECT_EQ(subtract("491","1552"), "-1061");

// positive inputs, positive results
EXPECT_EQ(subtract("3","2"), "1");
EXPECT_EQ(subtract("7","7"), "0");
EXPECT_EQ(subtract("199","59"), "140");
EXPECT_EQ(subtract("248","120"), "128");
EXPECT_EQ(subtract("455","320"), "135");
EXPECT_EQ(subtract("544","352"), "192");
EXPECT_EQ(subtract("801","109"), "692");
EXPECT_EQ(subtract("1154","536"), "618");
EXPECT_EQ(subtract("1394","455"), "939");
EXPECT_EQ(subtract("1275","11"), "1264");
EXPECT_EQ(subtract("991","979"), "12");

// negative inputs, positive results
EXPECT_EQ(subtract("-170","-294"), "124");
EXPECT_EQ(subtract("-76","-829"), "753");
EXPECT_EQ(subtract("-342","-940"), "598");
EXPECT_EQ(subtract("-479","-729"), "250");
EXPECT_EQ(subtract("-861","-1208"), "347");
EXPECT_EQ(subtract("-867","-867"), "0");

// negative inputs, negative results
EXPECT_EQ(subtract("-9","-7"), "-2");
EXPECT_EQ(subtract("-36","-9"), "-27");
EXPECT_EQ(subtract("-202","-188"), "-14");
EXPECT_EQ(subtract("-296","-249"), "-47");
EXPECT_EQ(subtract("-273","-214"), "-59");
EXPECT_EQ(subtract("-364","-178"), "-186");
EXPECT_EQ(subtract("-632","-490"), "-142");
EXPECT_EQ(subtract("-788","-599"), "-189");
EXPECT_EQ(subtract("-701","-477"), "-224");
EXPECT_EQ(subtract("-1034","-597"), "-437");
EXPECT_EQ(subtract("-1182","-646"), "-536");
EXPECT_EQ(subtract("-631","-541"), "-90");
EXPECT_EQ(subtract("-486","-470"), "-16");
EXPECT_EQ(subtract("-1160","-800"), "-360");
EXPECT_EQ(subtract("-1811","-1686"), "-125");

// positive and negative inputs, positive results
EXPECT_EQ(subtract("1", "-1"), "2");
EXPECT_EQ(subtract("1", "-2"), "3");
EXPECT_EQ(subtract("1", "-3"), "4");
EXPECT_EQ(subtract("1", "-4"), "5");
EXPECT_EQ(subtract("1", "-5"), "6");
EXPECT_EQ(subtract("1", "-6"), "7");
EXPECT_EQ(subtract("1", "-7"), "8");
EXPECT_EQ(subtract("1", "-8"), "9");
EXPECT_EQ(subtract("1", "-9"), "10");
EXPECT_EQ(subtract("2", "-2"), "4");
EXPECT_EQ(subtract("2", "-3"), "5");
EXPECT_EQ(subtract("2", "-4"), "6");
EXPECT_EQ(subtract("2", "-5"), "7");
EXPECT_EQ(subtract("2", "-6"), "8");
EXPECT_EQ(subtract("2", "-7"), "9");
EXPECT_EQ(subtract("2", "-8"), "10");
EXPECT_EQ(subtract("2", "-9"), "11");
EXPECT_EQ(subtract("3", "-3"), "6");
EXPECT_EQ(subtract("3", "-4"), "7");
EXPECT_EQ(subtract("3", "-5"), "8");
EXPECT_EQ(subtract("3", "-6"), "9");
EXPECT_EQ(subtract("3", "-7"), "10");
EXPECT_EQ(subtract("3", "-8"), "11");
EXPECT_EQ(subtract("3", "-9"), "12");
EXPECT_EQ(subtract("4", "-4"), "8");
EXPECT_EQ(subtract("4", "-5"), "9");
EXPECT_EQ(subtract("4", "-6"), "10");
EXPECT_EQ(subtract("4", "-7"), "11");
EXPECT_EQ(subtract("4", "-8"), "12");
EXPECT_EQ(subtract("4", "-9"), "13");

EXPECT_EQ(subtract("7", "-9993"), "10000");

// negative and positive inputs, negative results
EXPECT_EQ(subtract("-5", "5"), "-10");
EXPECT_EQ(subtract("-5", "6"), "-11");
EXPECT_EQ(subtract("-5", "7"), "-12");
EXPECT_EQ(subtract("-5", "8"), "-13");
EXPECT_EQ(subtract("-5", "9"), "-14");
EXPECT_EQ(subtract("-6", "6"), "-12");
EXPECT_EQ(subtract("-6", "7"), "-13");
EXPECT_EQ(subtract("-6", "8"), "-14");
EXPECT_EQ(subtract("-6", "9"), "-15");
EXPECT_EQ(subtract("-7", "7"), "-14");
EXPECT_EQ(subtract("-7", "8"), "-15");
EXPECT_EQ(subtract("-7", "9"), "-16");
EXPECT_EQ(subtract("-8", "8"), "-16");
EXPECT_EQ(subtract("-8", "9"), "-17");
EXPECT_EQ(subtract("-9", "9"), "-18");

EXPECT_EQ(subtract("-321", "654"), "-975");
}


/*
@number: 36
@name: bonus_02
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
// positive inputs
EXPECT_EQ(subtract("48752427287938549938871976230934060537","65267511343333611781716171617426445425"), "-16515084055395061842844195386492384888");
EXPECT_EQ(subtract("266382010103378429677059586867419586154","303892115305100015554221689310299064506"), "-37510105201721585877162102442879478352");
EXPECT_EQ(subtract("142974270972502514518295398473876452364","151016107082605058921384567173457486424"), "-8041836110102544403089168699581034060");
EXPECT_EQ(subtract("23860295552243386473785382947124677414","283955447601517285666698288741734355327"), "-260095152049273899192912905794609677913");
EXPECT_EQ(subtract("289662700577631440424692455618339600276","168370727032076779951393212844731780474"), "121291973545554660473299242773607819802");
EXPECT_EQ(subtract("305987441472195343543102785496626409390","24538112989921313344050890145614720780"), "281449328482274030199051895351011688610");
EXPECT_EQ(subtract("202974241081715953876059570593059947983","302009408497079959519453505875145843434"), "-99035167415364005643393935282085895451");
EXPECT_EQ(subtract("298516149207970643964941432412026643945","263000695894160103185788299569428254236"), "35515453313810540779153132842598389709");
EXPECT_EQ(subtract("52852830937228336933083797764063785614","85792115240344301023352927379623341254"), "-32939284303115964090269129615559555640");
EXPECT_EQ(subtract("158085138550633165643446745658308827968","267962146018681741919350247309970901515"), "-109877007468048576275903501651662073547");
EXPECT_EQ(subtract("65533048037298596692380050394764952898","323890183604774242144150011518429180072"), "-258357135567475645451769961123664227174");
EXPECT_EQ(subtract("35854371426722608402296107268078872373","30888108145574981836890123341338992087"), "4966263281147626565405983926739880286");
EXPECT_EQ(subtract("209760286002518635466707919347632722801","6727904120869095940228996784513831683"), "203032381881649539526478922563118891118");
EXPECT_EQ(subtract("120617109869433763834139399513150094102","299681088841601564736778049881628407834"), "-179063978972167800902638650368478313732");
EXPECT_EQ(subtract("134346840793233141926438403231736846357","21937806696060314486848723895858046856"), "112409034097172827439589679335878799501");
EXPECT_EQ(subtract("217964824397217488654656726017283411593","321677987750117740879153896105373493527"), "-103713163352900252224497170088090081934");
EXPECT_EQ(subtract("85218584426163509674885441968868679124","29554959767820109147065544552440747653"), "55663624658343400527819897416427931471");
EXPECT_EQ(subtract("240802105386126636161950183069946042590","31933191903981483275785302675660302961"), "208868913482145152886164880394285739629");
EXPECT_EQ(subtract("19525376948677756039068643548093466628","263460402957054735125928568965732453035"), "-243935026008376979086859925417638986407");
EXPECT_EQ(subtract("337661837117772885229418011622729959521","333006189018604271604254573497074255834"), "4655648099168613625163438125655703687");

// really big positives
EXPECT_EQ(subtract("43824369400560350710364924490627746101407371086278950960141188240679079373299606276260375359467936725177796064040437146595579678387979655310881681351688172148426111617442869611120313388466169719407397","38297173707411403697394035566199542169675952715853219116804811379449637264961393122000125412814893553545714974410197682943600371837121862150697422740900563620459503633543941427509262885196140463255044"),"5527195693148947012970888924428203931731418370425731843336376861229442108338213154260249946653043171632081089630239463651979306550857793160184258610787608527966607983898928183611050503270029256152353");


// negative inputs
EXPECT_EQ(subtract("-227255454778348772266655626882142511218","-52852957476757338913015187500441435450"), "-174402497301591433353640439381701075768");
EXPECT_EQ(subtract("-26870792999834451649037433287447363544","-92275082464678783692767994605733901562"), "65404289464844332043730561318286538018");
EXPECT_EQ(subtract("-148178077568016434354931731476001573551","-303082151259252603006631049100787226783"), "154904073691236168651699317624785653232");
EXPECT_EQ(subtract("-211810807938764145478689083514209428066","-254702758779892364109751968577555650398"), "42891950841128218631062885063346222332");
EXPECT_EQ(subtract("-117353833977971120675652271240226641725","-275084961314268169888139888531961330250"), "157731127336297049212487617291734688525");
EXPECT_EQ(subtract("-108695543152747558349503712183769592381","-168648753495845388598497092632328970210"), "59953210343097830248993380448559377829");
EXPECT_EQ(subtract("-220815086779690343170513982073298801150","-97153286955800176171855294053658909301"), "-123661799823890166998658688019639891849");
EXPECT_EQ(subtract("-95387733882253732630793192910614023694","-193854250580088888934559190213861897212"), "98466516697835156303765997303247873518");
EXPECT_EQ(subtract("-204512512196394552704325323028454276570","-306888787441472278960614182942277618306"), "102376275245077726256288859913823341736");
EXPECT_EQ(subtract("-234577751778284362415868208449114899041","-240113753537580494597473851052018120772"), "5536001759296132181605642602903221731");
EXPECT_EQ(subtract("-179764214396968423962712911218687043695","-136137680381741694699784408064158430946"), "-43626534015226729262928503154528612749");
EXPECT_EQ(subtract("-145982099859524877507796844356136320688","-121821423449700695136107710558875475594"), "-24160676409824182371689133797260845094");
EXPECT_EQ(subtract("-156876452840839229378134258435747337573","-98615594822568564400886545779705647449"), "-58260858018270664977247712656041690124");
EXPECT_EQ(subtract("-217689838939938145918143366048282279564","-112992460587734029912602959168327934449"), "-104697378352204116005540406879954345115");
EXPECT_EQ(subtract("-36732464894163333725984128158256827524","-233958335058328957035476896020235690949"), "197225870164165623309492767861978863425");
EXPECT_EQ(subtract("-128241463938348696388763880769177005724","-113888463510391341659342691329875276845"), "-14353000427957354729421189439301728879");
EXPECT_EQ(subtract("-17689211417752161302605930129193538358","-255124090932148718695109053508808169182"), "237434879514396557392503123379614630824");
EXPECT_EQ(subtract("-136555783812011291135883783331554133623","-28783343499355141192776599059341179746"), "-107772440312656149943107184272212953877");
EXPECT_EQ(subtract("-110361927688122503213319120189978232119","-116325187494055295484405037993549084637"), "5963259805932792271085917803570852518");
EXPECT_EQ(subtract("-145431933549076857510406827810951991260","-310186802482002275001989902020213302158"), "164754868932925417491583074209261310898");

// really big negatives
EXPECT_EQ(subtract("-84657195840739899701968642440092555475950855341055952622842797759007348365818513252461408734779288623386843375083186421711847452025093655124749680995848948662328034859357632229693161712380409049425671","-64255423531296279533190714272466857073083526446299227252984685785380341490207461237525434962229698873491981166197828624560632819482999862840628125956991900425290377735952571639887329956476973387906895"),"-20401772309443620168777928167625698402867328894756725369858111973627006875611052014935973772549589749894862208885357797151214632542093792284121555038857048237037657123405060589805831755903435661518776");


// negative and positive inputs
EXPECT_EQ(subtract("194238778630137803092208832644971880794","-71088090747835925266776242288205173394"), "265326869377973728358985074933177054188");
EXPECT_EQ(subtract("310388267406651892487859483771480985556","-210447517389049168313389427688476545145"), "520835784795701060801248911459957530701");
EXPECT_EQ(subtract("255967417024036183948367538490565125784","-333188569261686234868400081742208291257"), "589155986285722418816767620232773417041");
EXPECT_EQ(subtract("61690359917168112105440247830830491793","-336960144632751713850279786510619621145"), "398650504549919825955720034341450112938");
EXPECT_EQ(subtract("119396777161319732547990806904951807087","-45827986043814860306816599065508801786"), "165224763205134592854807405970460608873");
EXPECT_EQ(subtract("337418836065288452808834240457414854555","-267778482985480276766031347015230643569"), "605197319050768729574865587472645498124");
EXPECT_EQ(subtract("268340555132069875664035358125328509928","-81716533010347393788406835858875296448"), "350057088142417269452442193984203806376");
EXPECT_EQ(subtract("298139527279428518183448931891987244849","-204850489818813097862348669440878146063"), "502990017098241616045797601332865390912");
EXPECT_EQ(subtract("35544024198463463638534134100999143606","-256472038735111624879901207102621164147"), "292016062933575088518435341203620307753");
EXPECT_EQ(subtract("211575857879838709718047681735878997744","-238872441418016426143957772174524501545"), "450448299297855135862005453910403499289");

EXPECT_EQ(subtract("-67546684516630475939249643673345452282","155958931363103155803587162720193823819"), "-223505615879733631742836806393539276101");
EXPECT_EQ(subtract("-275749026667743981914753958601977223081","60986848139896447052888863496577534038"), "-336735874807640428967642822098554757119");
EXPECT_EQ(subtract("-126767855963379180968271427677269140553","222879806637498026833326798532778580419"), "-349647662600877207801598226210047720972");
EXPECT_EQ(subtract("-135064137076392591375284226054769665998","58765470322698053913485674600372720443"), "-193829607399090645288769900655142386441");
EXPECT_EQ(subtract("-270060557810174604762871151169302376915","147959802139039347024094483784921141782"), "-418020359949213951786965634954223518697");
EXPECT_EQ(subtract("-220048278298456870977660154734793445504","47003273582172991247719155612371504029"), "-267051551880629862225379310347164949533");
EXPECT_EQ(subtract("-304954650769159141441362637282732052434","330761618105097469588074954521359131838"), "-635716268874256611029437591804091184272");
EXPECT_EQ(subtract("-272193307592410247969888760092745408571","97497166053405990710141840915717974679"), "-369690473645816238680030601008463383250");
EXPECT_EQ(subtract("-164475246170743631184384298074561998266","201707950666093073787646293859038583353"), "-366183196836836704972030591933600581619");
EXPECT_EQ(subtract("-99961009253417166698863911656289650170","87772442277380217970138980089038197397"), "-187733451530797384669002891745327847567");

// really big opposite signs
EXPECT_EQ(subtract("52016030045747623006009395412376598578978290145893324296711867169471441411009763143917358413231406689190207886069446314517446669845634609522783393370218616508309556541240242633935539275461827135341340","-82160740926385882702913452022641083450327923007210891182115139025359852106318861949825285205187737358384744761590008883698338563860057257348327922287348326653740435129415705660245455379810458688258593"),"134176770972133505708922847435017682029306213153104215478827006194831293517328625093742643618419144047574952647659455198215785233705691866871111315657566943162049991670655948294180994655272285823599933");
EXPECT_EQ(subtract("-26834126391724109362797990700393236725642886536847770419465483233323021683041936769036733492694134150125590824795732669018971383764449211428508316123067766548759887624336701264303793307537971258946298","62806456815542014287037692800952940733014442727089798767228745440738621767943697562874675059921849888187643389986275512437887952718814893147369907117616987066198155037230751930096140758629863151360348"),"-89640583207266123649835683501346177458657329263937569186694228674061643450985634331911408552615984038313234214782008181456859336483264104575878223240684753614958042661567453194399934066167834410306646");
}

/*
@number: 37
@name: bonus_03
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/bonus_03_input.txt
output
io_tests/bonus_03_output.txt
}

/*
@number: 38
@name: bonus_04
@points: 1
@show_output: False
@type: unit
@target: string_calculator.cpp 
*/
{
// positive inputs
EXPECT_EQ(subtract("487524272537","6526617426445425"), "-6526129902172888");
EXPECT_EQ(subtract("266382010154","3038929064506"), "-2772547054352");
EXPECT_EQ(subtract("-142974270972398473876452364","15058921384567173457486424"), "-158033192356965647333938788");
EXPECT_EQ(subtract("238602955522433864734","-283955447601517285666698288741734355327"), "283955447601517285905301244264168220061");
EXPECT_EQ(subtract("28966270057768908424692455618339600276","809827032076779951393212844731780474"), "28156443025692128473299242773607819802");
EXPECT_EQ(subtract("21341472195343543102785496626409390","245989921313344050890145614720780"), "21095482274030199051895351011688610");
EXPECT_EQ(subtract("2053876059570593059947983","30959519453505875145843434"), "-28905643393935282085895451");
EXPECT_EQ(subtract("-298516149207970643964941432412026643945","-263000695894160103185788299569428254236"), "-35515453313810540779153132842598389709");
EXPECT_EQ(subtract("-52852830937228336933083797764063785614","-85792115240344301023352927379623341254"), "32939284303115964090269129615559555640");

// really big opposite signs
EXPECT_EQ(subtract("525412376598578978290145893324296711867169471441411009763143917358413231406689190207886069446314517446669845634609522783393370218616508309556541240242633935539275461827135341340","-2913452022641083450327923007210891182115139025359852106318861949825285205187737358384744761590008883698338563860057257348327922287348326653740435129415705660245455379810458688258593"),"2913977435017682029306213153104215478827006194831293517328625093742643618419144047574952647659455198215785233705691866871111315657566943162049991670655948294180994655272285823599933");
EXPECT_EQ(subtract("-268390700393236725642886536847770419465483233323021683041936769036733492694134150125590824795732669018971383764449211428508316123067766548759887624336701264303793307537971258946298","6214287037692800952940733014442727089798767228745440738621767943697562874675059921849888187643389986275512437887952718814893147369907117616987066198155037230751930096140758629863151360348"),"-6214287306083501346177458657329263937569186694228674061643450985634331911408552615984038313234214782008181456859336483264104575878223240684753614958042661567453194399934066167834410306646");
}

/*
@number: 39
@name: bonus_05
@points: 1
@show_output: True
@type: unit
@target: string_calculator.cpp 
*/
{
EXPECT_EQ(add("75","-147"), "-72");
EXPECT_EQ(add("87","-126"), "-39");
EXPECT_EQ(add("145","-272"), "-127");
EXPECT_EQ(add("117","-203"), "-86");
EXPECT_EQ(add("373","-703"), "-330");

EXPECT_EQ(add("-82","9"), "-73");
EXPECT_EQ(add("-350","139"), "-211");
EXPECT_EQ(add("-203","76"), "-127");

EXPECT_EQ(add("-2","2"), "0");
EXPECT_EQ(add("-127","128"), "1");
EXPECT_EQ(add("-105","218"), "113");
EXPECT_EQ(add("-199","397"), "198");
EXPECT_EQ(add("-31","371"), "340");
EXPECT_EQ(add("-569","600"), "31");
EXPECT_EQ(add("-276","643"), "367");

EXPECT_EQ(add("246718426779153720731557875846577079805","-15898397256925823312587626526929060119"), "230820029522227897418970249319648019686");
EXPECT_EQ(add("169499728056763031497984752397449888448","-211840891829818490885412234583422400645"), "-42341163773055459387427482185972512197");
EXPECT_EQ(add("302206628191693640170300993197330362374","-334621172739097626671268476858705609302"), "-32414544547403986500967483661375246928");
EXPECT_EQ(add("292042899041351706124175569514515029033","-110042265599749175306635238465469077784"), "182000633441602530817540331049045951249");
EXPECT_EQ(add("282242167613811030746061916100999876293","-66080300880367281267046524811199887732"), "216161866733443749479015391289799988561");

EXPECT_EQ(add("-115585035243374196144533783775135842225","333542132238923800088321578792182097861"), "217957096995549603943787795017046255636");
EXPECT_EQ(add("-322291638144364619172974087828243536456","186270499803306219153875921587547624389"), "-136021138341058400019098166240695912067");
EXPECT_EQ(add("-175046767186861944495224308586853284591","256579015508136436432337048674778464713"), "81532248321274491937112740087925180122");
EXPECT_EQ(add("-293509472855069720361163092047413053773","16245880043916501805087827187715128190"), "-277263592811153218556075264859697925583");
EXPECT_EQ(add("-246357932929230786018917006669169749656","151958519346333494766973316291392547294"), "-94399413582897291251943690377777202362");

// really big opposite signs
EXPECT_EQ(add("29957519673198698027088845511827648720389896438769946128245089183999894824264084369633713647420813020367665638812088914855850704020985819153197879581709890160604215554992242826395311145173145560615359","-54889671223523421151337538482038925685035269812966458890010869173220669543897185489706208473073755809212879661047554552566087895344761456044339402588097902715916172113010066190565528853175311384067815"),"-24932151550324723124248692970211276964645373374196512761765779989220774719633101120072494825652942788845214022235465637710237191323775636891141523006388012555311956558017823364170217708002165823452456");
EXPECT_EQ(add("-12905923631645826057238369970132756433347151306451636958713022201759231285779216679723647080753220282974096009118965998257664562350404189817073801903787859599339267852498476710457988623644024282460660","21847382141702273146053414019873988960733210881697520692886050303365184104257316233314061263393643690900806358282462050244343123616876959722338520082946425390619112964198387666576549542584493961421302"),"8941458510056447088815044049741232527386059575245883734173028101605952818478099553590414182640423407926710349163496051986678561266472769905264718179158565791279845111699910956118560918940469678960642");
}

/*
@number: 40
@name: bonus_06
@points: 2
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/bonus_06_input.txt
output
io_tests/bonus_06_output.txt
}

/*
@number: 41
@name: bonus_07
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/bonus_07_input.txt
output
io_tests/bonus_07_output.txt
}

/*
@number: 42
@name: bonus_08
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/bonus_08_input.txt
output
io_tests/bonus_08_output.txt
}

/*
@number: 43
@name: bonus_09
@points: 1
@show_output: True
@type: i/o
@target: main.cpp 
*/
{
input
io_tests/bonus_09_input.txt
output
io_tests/bonus_09_output.txt
}

/*
@number: 999.
@name: End of tests
@points: 0
@show_output: True
@type: eot
@target: main.cpp 
*/
{
}